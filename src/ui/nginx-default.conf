server {
    listen       5173;
    server_name  localhost;
    large_client_header_buffers 4 16k;
    client_header_buffer_size 16k;

    root   /usr/share/nginx/html;
    index  index.html index.htm;

    gzip on;
    gzip_vary on;
    gzip_min_length 4096;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types application/javascript application/json application/problem+json application/problem+xml application/x-javascript application/xhtml+xml application/xml font/woff2 text/css text/csv text/html text/javascript text/plain text/xml;
    gzip_disable "MSIE [1-6]\.";
    gzip_comp_level 5;

    location / { try_files $uri $uri/ /index.html; }

    location = / {
        add_header 'Expires' '0' always;
        add_header 'Pragma' 'no-cache' always;
        add_header 'Cache-Control' 'no-cache, no-store, must-revalidate' always;
         add_header 'Access-Control-Allow-Origin' '*' always;
    }
    
    location = /index.html {
        add_header 'Expires' '0' always;
        add_header 'Pragma' 'no-cache' always;
        add_header 'Cache-Control' 'no-cache, no-store, must-revalidate' always;
    }
  
    
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    location = /health {
        default_type application/json;
        return 200 '{"status":"UP"}';
    }

    # This following two locations are a noop service that simply logs the request to stdout. # We need to force nginx to parse the request body to be able to
    # log it. The simplest way to do so is to proxy the request to myself.
 

    location /noop {
        # supress logging here as we already logged it during the proxy pass
        access_log off;
        return 200 'noop, this service simply logs the request to stdout!';
        add_header Content-Type text/plain always;
    }}